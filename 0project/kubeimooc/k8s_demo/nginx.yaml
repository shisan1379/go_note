# 一个简单的pod
# 指定 API 版本，v1 是 Kubernetes 核心 API 的版本，包含了如 Pod、Service 等基本资源的定义
apiVersion: v1
# 指定资源的类型，这里创建的资源类型是 Pod
kind: Pod

# 元数据部分，包含了该 Pod 的一些标识信息
metadata:
  # Pod 的名称，在同一命名空间下必须唯一
  name: nginx
  # Pod 所属的命名空间，这里指定为 test 命名空间
  namespace: test
  # 标签，用于对资源进行分类和选择，可用于后续的选择器查询等操作
  labels:
    # 自定义的标签键值对，这里使用 app 作为键，nginx 作为值，可用于标识该 Pod 所属的应用
    app: nginx

# Pod 的规格部分，定义了 Pod 中容器的具体配置
spec:
  # 当设置为 true 时，该 Pod 将使用宿主机的网络命名空间。
  # 这意味着 Pod 内的容器会直接使用宿主机的网络接口，与宿主机共享 IP 地址和端口空间。
  # 通常用于需要直接访问宿主机网络或需要特殊网络配置的场景，但会牺牲一定的网络隔离性。
  hostNetwork: false
  # dnsPolicy 用于指定 Pod 的 DNS 解析策略，可选值有：
  # - Default: 使用宿主机的 DNS 配置，即直接沿用宿主机的 /etc/resolv.conf 文件中的配置。
  # - ClusterFirst: 优先使用 Kubernetes 集群内的 DNS 服务（通常是 CoreDNS）进行解析，如果解析失败，再尝试使用宿主机的 DNS 配置。
  # - ClusterFirstWithHostNet: 当使用 hostNetwork: true 时，使用此策略意味着优先使用集群内的 DNS 服务，若失败则使用宿主机的 DNS 配置。
  # - None: 不使用任何默认的 DNS 策略，需要通过 dnsConfig 字段手动配置 DNS 信息。
  dnsPolicy: "Default"
  # dnsConfig 用于手动配置 Pod 的 DNS 解析信息，当 dnsPolicy 设置为 None 时必须使用，
  # 也可以在其他策略下用于覆盖或补充默认的 DNS 配置。
  dnsConfig:
    # nameservers 字段指定了用于 DNS 解析的服务器 IP 地址列表。
    # Pod 内的容器在进行 DNS 解析时，会按照列表中的顺序依次尝试这些 DNS 服务器。
    # 这里指定了 Google 的公共 DNS 服务器 8.8.8.8，意味着该 Pod 会优先使用这个 DNS 服务器进行域名解析。
    nameservers:
      - 8.8.8.8
  # 域名映射：通过 hostAliases 字段可以为 Pod 内的容器提供额外的域名与 IP 地址的映射关系，
  # 这类似于在宿主机的 /etc/hosts 文件中添加条目。这样做可以让容器在不依赖 DNS 解析的情况下，
  # 直接通过域名访问指定的 IP 地址，常用于测试环境或者需要快速修改域名解析的场景。
  hostAliases:
    - ip: 192.168.144.143
      hostnames:
        - "foo.local"
        - "bar.local"
  # 容器列表，可包含一个或多个容器，这里只有一个名为 nginx 的容器
  containers:
    # 容器的名称
    - name: nginx
      # 容器使用的镜像，这里使用 nginx 镜像，它是一个精简的 Linux 工具集镜像
      image: nginx
      # 镜像拉取策略，IfNotPresent 表示只有当本地不存在该镜像时才会去拉取
      imagePullPolicy: IfNotPresent
      ports:
        - name: "default"
          containerPort: 80
          #如果使用 hostNetwork 这里就不能指定端口
          hostPort: 8080
