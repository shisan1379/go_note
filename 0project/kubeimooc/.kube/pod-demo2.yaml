apiVersion: v1  # 指定API版本，Pod使用v1
kind: Pod  # 指定资源类型为Pod
metadata:
  name: my-pod  # Pod的名称（必须）
  namespace: default  # Pod所属的命名空间，默认为default
  labels:  # 标签，用于选择和分类资源
    app: my-app
    tier: frontend
  annotations:  # 注解，用于存储非标识性元数据
    description: "This is a sample pod"
    kubernetes.io/created-by: "{...}"  # 自动生成的创建信息
spec:
  # 容器定义（必须至少有一个容器）
  containers:
    - name: main-container  # 容器名称（必须）
      image: nginx:1.14.2  # 容器镜像（必须）
      imagePullPolicy: Always  # 镜像拉取策略：Always, Never, IfNotPresent
      command: ["/bin/sh", "-c"]  # 覆盖容器的默认命令
      args: ["echo Hello from the container"]  # 传递给命令的参数
      workingDir: /app  # 容器的工作目录
      ports:  # 容器暴露的端口
        - name: http  # 端口名称
          containerPort: 80  # 容器内部端口
          protocol: TCP  # 协议类型：TCP, UDP, SCTP
      env:  # 环境变量
        - name: DB_HOST  # 环境变量名称
          value: "database.example.com"  # 环境变量值
        - name: DB_USER  # 从Secret获取环境变量
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: username
        - name: DB_PASSWORD  # 从ConfigMap获取环境变量
          valueFrom:
            configMapKeyRef:
              name: db-config
              key: password
      resources:  # 资源请求和限制
        requests:  # 容器运行所需的最小资源
          memory: "64Mi"
          cpu: "250m"  # 1个CPU核心的25%
        limits:  # 容器允许使用的最大资源
          memory: "128Mi"
          cpu: "500m"
      volumeMounts:  # 挂载卷
        - name: data-volume  # 卷名称，必须与spec.volumes中的名称匹配
          mountPath: /data  # 容器内的挂载路径
          readOnly: false  # 只读挂载
        - name: config-volume
          mountPath: /etc/config
          subPath: my-config.yaml  # 挂载卷的特定文件
      livenessProbe:  # 存活探针，检查容器是否运行
        httpGet:  # HTTP GET请求检查
          path: /healthz
          port: 8080
          httpHeaders:
            - name: Custom-Header
              value: Awesome
        initialDelaySeconds: 15  # 容器启动后等待的秒数
        periodSeconds: 10  # 检查频率
        timeoutSeconds: 1  # 超时时间
        successThreshold: 1  # 连续成功次数
        failureThreshold: 3  # 连续失败次数
      readinessProbe:  # 就绪探针，检查容器是否可以接收流量
        exec:  # 执行命令检查
          command: ["/bin/sh", "-c", "cat /tmp/healthy"]
        initialDelaySeconds: 5
        periodSeconds: 5
      startupProbe:  # 启动探针，检查容器是否已启动
        tcpSocket:  # TCP套接字检查
          port: 8080
        failureThreshold: 30
        periodSeconds: 10
      lifecycle:  # 容器生命周期钩子
        postStart:  # 容器创建后执行的操作
          exec:
            command: ["/bin/sh", "-c", "echo Hello from the postStart handler"]
        preStop:  # 容器终止前执行的操作
          exec:
            command: ["/bin/sh", "-c", "nginx -s quit; sleep 5"]
      securityContext:  # 容器安全上下文
        runAsUser: 1000  # 运行容器的用户ID
        runAsGroup: 3000  # 运行容器的组ID
        allowPrivilegeEscalation: false  # 是否允许特权升级
        capabilities:  # 添加或删除容器的内核能力
          add: ["NET_ADMIN", "SYS_TIME"]
          drop: ["ALL"]
      terminationMessagePath: /dev/termination-log  # 终止消息路径
      terminationMessagePolicy: File  # 终止消息策略：File, FallbackToLogsOnError

      stdin: true  # 标准输入保持打开
      stdinOnce: true  # 只允许一次标准输入
      tty: true  # 分配伪终端
  imagePullSecrets:  # 拉取镜像所需的秘钥
    - name: myregistrykey
  # 可选字段：重启策略
  restartPolicy: Always  # 重启策略：Always, OnFailure, Never

  # 可选字段：终止宽限期
  terminationGracePeriodSeconds: 30  # 容器终止前的宽限期（秒）

  # 可选字段：活跃死锁期限
  activeDeadlineSeconds: 86400  # Pod的最长运行时间（秒）

  # 可选字段：DNS策略
  dnsPolicy: ClusterFirst  # DNS策略：Default, ClusterFirst, ClusterFirstWithHostNet, None

  # 可选字段：节点选择器
  nodeSelector:  # 用于将Pod调度到特定节点
    disktype: ssd

  # 可选字段：服务质量（QoS）
  priorityClassName: high-priority  # 优先级类名称
  priority: 1000  # 优先级值（数值越大优先级越高）

  # 可选字段：容忍度（Taints）
  tolerations:
    - key: "node-role.kubernetes.io/master"
      operator: "Exists"
      effect: "NoSchedule"

  # 可选字段：主机网络设置
  hostNetwork: false  # 是否使用主机网络
  hostPID: false  # 是否使用主机PID命名空间
  hostIPC: false  # 是否使用主机IPC命名空间

  # 可选字段：主机别名
  hostname: my-pod-hostname  # Pod的主机名
  subdomain: my-service  # Pod的子域名

  # 可选字段：DNS配置
  dnsConfig:
    nameservers: ["8.8.8.8", "8.8.4.4"]
    searches: ["mycompany.com", "subdomain.mycompany.com"]
    options:
      - name: ndots
        value: "2"

  # 可选字段：卷定义
  volumes:
    - name: data-volume  # 卷名称
      emptyDir: {}  # 临时目录，随Pod生命周期存在
    - name: config-volume
      configMap:  # 挂载ConfigMap
        name: my-config
        items:
          - key: config.yaml
            path: my-config.yaml
    - name: secret-volume
      secret:  # 挂载Secret
        secretName: my-secret
        defaultMode: 0400  # 文件权限
    - name: host-volume
      hostPath:  # 挂载主机路径
        path: /data  # 主机上的路径
        type: Directory  # 类型：Directory, File, DirectoryOrCreate, FileOrCreate
    - name: persistent-volume
      persistentVolumeClaim:  # 挂载持久卷声明
        claimName: my-pvc

  # 可选字段：服务账户
  serviceAccountName: default  # 服务账户名称
  automountServiceAccountToken: true  # 是否自动挂载服务账户令牌

  # 可选字段：亲和性和反亲和性
  affinity:
    nodeAffinity:  # 节点亲和性
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: kubernetes.io/e2e-az-name
                operator: In
                values:
                  - e2e-az1
                  - e2e-az2
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 1
          preference:
            matchExpressions:
              - key: another-node-label-key
                operator: In
                values:
                  - another-node-label-value
    podAffinity:  # Pod亲和性
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: security
                operator: In
                values:
                  - S1
          topologyKey: kubernetes.io/hostname
    podAntiAffinity:  # Pod反亲和性
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app
                  operator: In
                  values:
                    - web
            topologyKey: kubernetes.io/hostname

  # 可选字段：容器组安全上下文
  securityContext:
    fsGroup: 2000  # 卷的组ID
    supplementalGroups: [1001, 1002]  # 额外的组ID
    runAsNonRoot: true  # 是否以非root用户运行

  # 可选字段：节点名称
  nodeName: kube-node-1  # 指定Pod运行的节点名称

  # 可选字段：优先级类
  schedulerName: default-scheduler  # 调度器名称

  # 可选字段：Pod拓扑分布约束
  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          app: my-app

  # 可选字段：Preemption Policy
  preemptionPolicy: PreemptLowerPriority  # 抢占策略：PreemptLowerPriority, Never

  # 可选字段：RuntimeClassName
  runtimeClassName: gvisor  # 容器运行时类名称

  # 可选字段：Overhead
  overhead:
    cpu: "2m"
    memory: "4Mi"

  # 可选字段：EnableServiceLinks
  enableServiceLinks: true  # 是否启用服务链接